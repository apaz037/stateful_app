package actions

import (
	"fmt"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/kris-nova/stateful_app/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (State)
// DB Table: Plural (states)
// Resource: Plural (States)
// Path: Plural (/states)
// View Template Folder: Plural (/templates/states/)

// StatesResource is the resource for the State model
type StatesResource struct {
	buffalo.Resource
}

// List gets all States. This function is mapped to the path
// GET /states
func (v StatesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	states := &models.States{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all States from the DB
	if err := q.All(states); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	c.Set("state", models.State{})

	return c.Render(200, r.Auto(c, states))
}

// Show gets the data for one State. This function is mapped to
// the path GET /states/{state_id}
func (v StatesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty State
	state := &models.State{}

	// To find the State the parameter state_id is used.
	if err := tx.Find(state, c.Param("state_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, state))
}

// New renders the form for creating a new State.
// This function is mapped to the path GET /states/new
func (v StatesResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.State{}))
}

// Create adds a State to the DB. This function is mapped to the
// path POST /states
func (v StatesResource) Create(c buffalo.Context) error {

	user, ok := c.Value("current_user").(*models.User)

	if !ok {
		return errors.WithStack(fmt.Errorf("Unauthorized"))
	}

	// Allocate an empty State
	state := &models.State{}

	// Bind state to the html form elements
	if err := c.Bind(state); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	state.First = user.Name
	state.Last = user.Name
	state.Content = user.Name
	state.CreatedAt = user.CreatedAt

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(state)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, state))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "State was created successfully")

	// and redirect to the states index page
	//return c.Render(201, r.Auto(c, state))
	return c.Redirect(302, "/")
}

// Edit renders a edit form for a State. This function is
// mapped to the path GET /states/{state_id}/edit
func (v StatesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty State
	state := &models.State{}

	if err := tx.Find(state, c.Param("state_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Redirect(302, "/")
}

// Update changes a State in the DB. This function is mapped to
// the path PUT /states/{state_id}
func (v StatesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty State
	state := &models.State{}

	if err := tx.Find(state, c.Param("state_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind State to the html form elements
	if err := c.Bind(state); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(state)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, state))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "State was updated successfully")

	// and redirect to the states index page
	return c.Redirect(302, "/")
}

// Destroy deletes a State from the DB. This function is mapped
// to the path DELETE /states/{state_id}
func (v StatesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty State
	state := &models.State{}

	// To find the State the parameter state_id is used.
	if err := tx.Find(state, c.Param("state_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(state); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "State was destroyed successfully")

	// Redirect to the states index page
	return c.Redirect(302, "/")
}
